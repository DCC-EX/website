{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the DCC++ EX Web page. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's Arduino based DCC++ software. DCC-EX picks up where the original DCC++ left off by addressing some previous issues in order to be able to release what we now call \"DCC++ Classic\" - Everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology. Our Mission Our mission is to supply the model railroading community with an Arduino (and optional accessories) based open source alternative to commercial DCC systems; One that is simple, affordable, expandable, and allows for a fast and successful out of box experience to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue into the future without fear that it will be abandoned. What is DCC++ EX? In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes What's new since DCC++ Classic? Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) The code is now simpler, modular, faster and provides an API Library for developers and easy expansion No more jumpers! (Beta) The system consists of multiple parts: Base Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the Arduino There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you. Next Page: Starter Kit","title":"Home"},{"location":"#welcome","text":"Welcome to the DCC++ EX Web page. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's Arduino based DCC++ software. DCC-EX picks up where the original DCC++ left off by addressing some previous issues in order to be able to release what we now call \"DCC++ Classic\" - Everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology.","title":"Welcome"},{"location":"#our-mission","text":"Our mission is to supply the model railroading community with an Arduino (and optional accessories) based open source alternative to commercial DCC systems; One that is simple, affordable, expandable, and allows for a fast and successful out of box experience to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue into the future without fear that it will be abandoned.","title":"Our Mission"},{"location":"#what-is-dcc-ex","text":"In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes","title":"What is DCC++ EX?"},{"location":"#whats-new-since-dcc-classic","text":"Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) The code is now simpler, modular, faster and provides an API Library for developers and easy expansion No more jumpers! (Beta)","title":"What's new since DCC++ Classic?"},{"location":"#the-system-consists-of-multiple-parts","text":"Base Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the Arduino There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you. Next Page: Starter Kit","title":"The system consists of multiple parts:"},{"location":"assembly/","text":"Assembly Work in progress Jumper Diagrams Next Page: Power Supplies","title":"Assembly"},{"location":"assembly/#assembly","text":"Work in progress Jumper Diagrams Next Page: Power Supplies","title":"Assembly"},{"location":"power-supplies/","text":"Power Supplies The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers. Voltage N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages: https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/ Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system. Amperage You'll need to be able to supply 3A per channel that you intend to run trains on, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply. Recommended Power Supplies Wall warts are a good choice for beginners and those not comfortable with mains wiring. TODO: Add recommended wall warts The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is a cheap option. You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005","title":"Power Supplies"},{"location":"power-supplies/#power-supplies","text":"The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers.","title":"Power Supplies"},{"location":"power-supplies/#voltage","text":"N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages: https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/ Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system.","title":"Voltage"},{"location":"power-supplies/#amperage","text":"You'll need to be able to supply 3A per channel that you intend to run trains on, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply.","title":"Amperage"},{"location":"power-supplies/#recommended-power-supplies","text":"Wall warts are a good choice for beginners and those not comfortable with mains wiring. TODO: Add recommended wall warts The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is a cheap option. You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005","title":"Recommended Power Supplies"},{"location":"starter-kit/","text":"DCC++ EX Starter Kit This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed Suppliers list coming soon What You Will Need A \"main\" track or \"operations\" - most people already have this, it's your layout A \"programming\" track or \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment A known-good locomotive equipped with a DCC decoder Equipment List: Hardware A compatible Arduino Board Arduino UNO R3 (clones work too) Arduino Mega (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) Computer to act as a controller to the Arduino Base Station * Software DCC++ EX repository JMRI Arduino IDE to upload DCC++ to the Arduino * You can use a MAC or a Raspberry Pi (Which we recommend) that is covered in another Guide Next Page: Assembly","title":"Starter Kit"},{"location":"starter-kit/#dcc-ex-starter-kit","text":"This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed Suppliers list coming soon","title":"DCC++ EX Starter Kit"},{"location":"starter-kit/#what-you-will-need","text":"A \"main\" track or \"operations\" - most people already have this, it's your layout A \"programming\" track or \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment A known-good locomotive equipped with a DCC decoder","title":"What You Will Need"},{"location":"starter-kit/#equipment-list","text":"","title":"Equipment List:"},{"location":"starter-kit/#hardware","text":"A compatible Arduino Board Arduino UNO R3 (clones work too) Arduino Mega (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) Computer to act as a controller to the Arduino Base Station *","title":"Hardware"},{"location":"starter-kit/#software","text":"DCC++ EX repository JMRI Arduino IDE to upload DCC++ to the Arduino * You can use a MAC or a Raspberry Pi (Which we recommend) that is covered in another Guide Next Page: Assembly","title":"Software"}]}